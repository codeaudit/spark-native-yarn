description = 'Native YARN/Tez port for Spark'
group = 'org.apache.spark.tez'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'application'
apply plugin: 'maven-publish'

mainClassName="org.apache.spark.tez.Main"

sourceCompatibility=1.6
targetCompatibility=1.6

sourceSets.main.scala.srcDir "src/main/java"
sourceSets.main.java.srcDirs = []
sourceSets.test.scala.srcDir "src/test/java"
sourceSets.test.java.srcDirs = []

publishing {
        publications {
            maven(MavenPublication) {
                groupId 'org.apache.spark.tez'
                artifactId 'spark-native-yarn'
                version '0.1-PREVIEW-1.2'
                from components.java
                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }
    
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    from sourceSets.main.allScala
}

repositories {
    mavenLocal();
    mavenCentral()
    maven { url = "$repoUrl" }
	//maven { url 'http://repository.apache.org/snapshots/' }
}

dependencies {
	compile "org.scala-lang:scala-compiler:$scalaVersion"
	compile "org.scala-lang:scala-library:$scalaVersion"
	
	compile ("org.apache.spark:spark-core_2.10:$sparkVersion") {
		exclude group: 'org.apache.hadoop'
	}
	compile ("org.apache.spark:spark-mllib_2.10:$sparkVersion") {
		exclude group: 'org.apache.hadoop'
	}
	runtime ("org.apache.spark:spark-repl_2.10:1.1.0") {
		exclude group: 'org.apache.hadoop'
		exclude group: 'org.apache.spark'
	}
	
	compile "org.apache.tez:tez-common:$tezVersion"
	compile "org.apache.tez:tez-dag:$tezVersion"
	compile "org.apache.tez:tez-mapreduce:$tezVersion"
	compile "org.apache.hadoop:hadoop-hdfs:$hadoopVersion"
	compile "javassist:javassist:3.12.1.GA"
	
	testCompile "org.scalanlp:breeze_2.10:0.9"
	testCompile "junit:junit-dep:$junitVersion"
	testCompile "org.mockito:mockito-all:$mockitoVersion"
}

compileScala {
	compileScala.scalaCompileOptions.additionalParameters= ['-feature']
	compileScala.scalaCompileOptions.additionalParameters= ['-language:existentials']
}

compileTestScala {
	compileTestScala.scalaCompileOptions.additionalParameters= ['-feature']
	compileTestScala.scalaCompileOptions.additionalParameters= ['-language:reflectiveCalls']
}

applicationDistribution.from('mini-clust-conf') {
    into "/conf"
    from ('src/main/resources') {
       into "/conf"
    }
}

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
}
